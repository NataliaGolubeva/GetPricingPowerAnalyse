{"version":3,"sources":["ColorModeSwitcher.js","components/Header.jsx","components/Input.jsx","components/InputPercent.jsx","components/AddInputForm.jsx","components/AddCurrentState.jsx","components/OptimisationInput.jsx","components/AddStatImpact.jsx","components/charts/Chart.jsx","components/InputFront.jsx","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","Header","mb","align","InputEuro","className","type","rest","classes","clsx","min","ml","bg","pointerEvents","children","InputPercent","AddInputForm","m","my","textAlign","htmlFor","Input","value","volume","onChange","onVolumeChange","maxWidth","price","onPriceChange","costs","onCostsChange","cogs","onCogsChange","taxes","onTaxesChange","targetProfit","onTargetProfitChange","validation","AddCurrentState","isNumeric","revenue","totalCosts","netProfit","ebitda","OptimizationInput","salesIncrease","onSalesIncrease","priceIncrease","onPriceIncrease","costsDecrease","onCostsDecrease","AddStatImpact","difNetProfitVolumeEuro","difNetProfitVolumePercent","difNetProfitPriceEuro","difNetProfitPricePercent","difNetProfitCostsEuro","difNetProfitCostsPercent","optimizationTotalEuro","optimizationTotalPercent","mt","newPrice","ChartCol","total","App","state","options","chart","id","xaxis","categories","series","name","data","this","width","Component","InputFront","useState","setVolume","setPrice","fixedCosts","setFixedCosts","setCogs","setTaxes","setTargetProfit","setSalesIncrease","setPriceIncrease","setCostsDecrease","setValidation","Math","round","newRevenueVolumeInc","newTotalCostsVolumeInc","toFixed","newRevenuePriceInc","newTotalCostsPriceInc","newTotalCostsDec","templateRows","templateColumns","gap","rowSpan","colSpan","e","parseInt","target","onFormSubmit","event","preventDefault","Chart","theme","extendTheme","colors","brand","100","900","pos","top","right","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f60eef3e.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import { Heading } from '@chakra-ui/react';\n\nfunction Header() {\n  return (\n    <Heading mb={10} align=\"center\">\n      Simulate the impact of Pricing as a Profit Driver\n    </Heading>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport {\n  NumberInput,\n  NumberInputField,\n  InputGroup,\n  InputRightElement,\n} from \"@chakra-ui/react\";\n\nfunction InputEuro(props) {\n  const { className, type = \"number\", ...rest } = props;\n  const classes = clsx(\"ui_numberfield\", className);\n\n  return (\n    <InputGroup>\n      <NumberInput min={0} ml=\"auto\" mb={2}>\n        <NumberInputField\n          className={classes}\n          type={type}\n          {...rest}\n          bg=\"white\"\n        />\n        <InputRightElement\n          pointerEvents=\"none\"\n          color=\"gray.400\"\n          fontSize=\"1.2em\"\n          children=\"€\"\n        />\n      </NumberInput>\n    </InputGroup>\n  );\n}\n\nexport default InputEuro;\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport {\n  NumberInput,\n  NumberInputField,\n  InputGroup,\n  InputRightElement,\n} from \"@chakra-ui/react\";\n\nfunction InputPercent(props) {\n  const { className, type = \"number\", ...rest } = props;\n  const classes = clsx(\"ui_numberfield\", className);\n\n  return (\n    <InputGroup>\n      <NumberInput min={0} ml=\"auto\" mb={2}>\n        <NumberInputField\n          className={classes}\n          type={type}\n          {...rest}\n          bg=\"white\"\n        />\n        <InputRightElement\n          pointerEvents=\"none\"\n          color=\"gray.400\"\n          fontSize=\"1.2em\"\n          children=\"%\"\n        />\n      </NumberInput>\n    </InputGroup>\n  );\n}\n\nexport default InputPercent;\n","import React from \"react\";\nimport { VStack, Flex, Heading } from \"@chakra-ui/react\";\nimport InputEuro from \"./Input\";\nimport InputPercent from \"./InputPercent\";\n\nfunction AddInputForm(props) {\n  return (\n    <VStack className=\"inputForm\" m={2}>\n      <Heading size=\"sm\" my={3} textAlign=\"center\">\n        Your actual company data\n      </Heading>\n      <Flex>\n        <label htmlFor=\"volume_sold\">Volume of product sold:</label>\n        <InputEuro\n          className=\"volume_sold\"\n          value={props.volume}\n          onChange={props.onVolumeChange}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n      <Flex>\n        <label htmlFor=\"average_price\">Average price per product:</label>\n        <InputEuro\n          className=\"average_price\"\n          value={props.price}\n          onChange={props.onPriceChange}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n      <Flex>\n        <label htmlFor=\"fixed_costs\">Total fixed costs:</label>\n        <InputEuro\n          className=\"fixed_costs\"\n          value={props.costs}\n          onChange={props.onCostsChange}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n      <Flex>\n        <label htmlFor=\"cogs\">Variable costs:</label>\n        <InputPercent\n          className=\"cogs\"\n          value={props.cogs}\n          onChange={props.onCogsChange}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n      <Flex>\n        <label htmlFor=\"taxes\">Taxes:</label>\n        <InputPercent\n          className=\"taxes\"\n          value={props.taxes}\n          onChange={props.onTaxesChange}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n      <Flex>\n        <label htmlFor=\"targetProfit\">Target profit:</label>\n        <InputEuro\n          className=\"targetProfit\"\n          value={props.targetProfit}\n          onChange={props.onTargetProfitChange}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n\n      <div className=\"validation-message\">{props.validation}</div>\n    </VStack>\n  );\n}\n\nexport default AddInputForm;\n","import React from \"react\";\nimport { Table, Tr, Tbody, Td, Heading } from \"@chakra-ui/react\";\n\nfunction AddCurrentState(props) {\n  return (\n    <>\n      <Heading mb={3} align=\"center\" size=\"lg\">\n        Current state\n      </Heading>\n      <Table variant=\"striped\" className=\"analyse\">\n        <Tbody>\n          <Tr>\n            <Td>Revenue</Td>\n            <Td isNumeric>{props.revenue}</Td>\n          </Tr>\n          <Tr>\n            <Td>Total Costs</Td>\n\n            <Td isNumeric>{props.totalCosts}</Td>\n          </Tr>\n          <Tr>\n            <Td>Net Profit</Td>\n\n            <Td isNumeric>{props.netProfit}</Td>\n          </Tr>\n          <Tr>\n            <Td>EBIDTA </Td>\n\n            <Td isNumeric>{props.ebitda}</Td>\n          </Tr>\n        </Tbody>\n      </Table>\n    </>\n  );\n}\n\nexport default AddCurrentState;\n","import InputPercent from \"./InputPercent\";\n\nimport { VStack, Flex, Heading } from \"@chakra-ui/react\";\n\nfunction OptimizationInput(props) {\n  return (\n    <VStack className=\"inputForm\">\n      <Heading size=\"sm\" my={3} textAlign=\"center\">\n        Optimisation in %\n      </Heading>\n      <Flex>\n        <label htmlFor=\"salesInc\">Sales target increase:</label>\n\n        <InputPercent\n          className=\"salesInc\"\n          value={props.salesIncrease}\n          onChange={props.onSalesIncrease}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n      <Flex>\n        <label htmlFor=\"priceInc\">Price increase:</label>\n        <InputPercent\n          className=\"priceInc\"\n          value={props.priceIncrease}\n          onChange={props.onPriceIncrease}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n      <Flex>\n        <label htmlFor=\"costsDec\">Costs decrease:</label>\n        <InputPercent\n          className=\"costsDec\"\n          value={props.costsDecrease}\n          onChange={props.onCostsDecrease}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n    </VStack>\n  );\n}\n\nexport default OptimizationInput;\n","import React from \"react\";\nimport {\n  StatGroup,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  StatArrow,\n  Heading,\n  Flex,\n} from \"@chakra-ui/react\";\n\nfunction AddStatImpact(props) {\n  if (!props.salesIncrease && !props.priceIncrease && !props.costsDecrease) {\n    return (\n      <Heading mb={3} align=\"center\" size=\"lg\">\n        Optimization loading ...\n      </Heading>\n    );\n  }\n  return (\n    <>\n      <Heading mb={3} align=\"center\" size=\"lg\">\n        Optimization impact\n      </Heading>\n\n      <StatGroup align=\"center\">\n        <Stat>\n          <StatLabel>Volume sold</StatLabel>\n          <StatNumber>{props.difNetProfitVolumeEuro} €</StatNumber>\n          <StatHelpText>\n            <StatArrow type=\"increase\" />\n            {props.difNetProfitVolumePercent} %\n          </StatHelpText>\n        </Stat>\n\n        <Stat>\n          <StatLabel>Average Price</StatLabel>\n          <StatNumber>{props.difNetProfitPriceEuro} €</StatNumber>\n          <StatHelpText>\n            <StatArrow type=\"increase\" />\n            {props.difNetProfitPricePercent} %\n          </StatHelpText>\n        </Stat>\n        <Stat>\n          <StatLabel>Costs Decrease</StatLabel>\n          <StatNumber>{props.difNetProfitCostsEuro} €</StatNumber>\n          <StatHelpText>\n            <StatArrow type=\"increase\" />\n            {props.difNetProfitCostsPercent} %\n          </StatHelpText>\n        </Stat>\n        <Stat>\n          <StatLabel>Total</StatLabel>\n          <StatNumber>{props.optimizationTotalEuro} €</StatNumber>\n          <StatHelpText>\n            <StatArrow type=\"increase\" />\n            {props.optimizationTotalPercent} %\n          </StatHelpText>\n        </Stat>\n      </StatGroup>\n      <StatGroup align=\"center\" mt={7}>\n        <Stat className=\"currentPrice\">\n          <StatLabel>Current price</StatLabel>\n          <StatNumber>{props.price} €</StatNumber>\n          <StatHelpText>Average</StatHelpText>\n        </Stat>\n\n        <Stat className=\"newPrice\">\n          <StatLabel>New Price</StatLabel>\n          <StatNumber>{props.newPrice} €</StatNumber>\n          <StatHelpText>\n            <StatArrow type=\"increase\" />\n            {props.priceIncrease} %\n          </StatHelpText>\n        </Stat>\n      </StatGroup>\n    </>\n  );\n}\n\nexport default AddStatImpact;\n","import React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { Heading } from \"@chakra-ui/react\";\n\nfunction ChartCol(props) {\n  const { volume, price, costs, total } = props;\n  class App extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        options: {\n          chart: {\n            id: \"basic-bar\",\n          },\n          xaxis: {\n            categories: [1991, 1992, 1993, 1994],\n          },\n        },\n        series: [\n          {\n            name: \"series-1\",\n            data: [volume, price, costs, total],\n          },\n        ],\n      };\n    }\n\n    render() {\n      return (\n        <div className=\"app\">\n          <div className=\"row\">\n            <div className=\"mixed-chart\">\n              <Chart\n                options={this.state.options}\n                series={this.state.series}\n                type=\"bar\"\n                width=\"500\"\n              />\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n  if (!volume && !price && !costs && !total) {\n    return (\n      <Heading mb={3} align=\"center\" size=\"lg\">\n        Chart loading ...\n      </Heading>\n    );\n  }\n  return <App />;\n}\n\nexport default ChartCol;\n","import React, { useState } from \"react\";\nimport { Grid, GridItem } from \"@chakra-ui/react\";\nimport AddInputForm from \"./AddInputForm\";\nimport AddCurrentState from \"./AddCurrentState\";\nimport OptimizationInput from \"./OptimisationInput\";\n\nimport AddStatImpact from \"./AddStatImpact\";\nimport ChartCol from \"./charts/Chart\";\nimport AddPriceChange from \"./AddPriceChange\";\n\nconst data = [];\nfunction InputFront() {\n  const [volume, setVolume] = useState(0);\n  const [price, setPrice] = useState(0);\n  const [fixedCosts, setFixedCosts] = useState(0);\n  const [cogs, setCogs] = useState(0);\n  const [taxes, setTaxes] = useState(0);\n\n  const [targetProfit, setTargetProfit] = useState(0);\n  const [salesIncrease, setSalesIncrease] = useState(0);\n  const [priceIncrease, setPriceIncrease] = useState(0);\n  const [costsDecrease, setCostsDecrease] = useState(0);\n\n  const [validation, setValidation] = useState(\"\");\n\n  // calculations of the current state\n  const revenue = volume * price;\n  const totalCosts = Math.round((cogs / 100) * revenue + fixedCosts);\n  const netProfit = Math.round(revenue - totalCosts);\n  const ebitda = Math.round(\n    netProfit + fixedCosts * 0.35 + netProfit * (taxes / 100)\n  );\n  // total costs = variable_costs + fixed_costs\n  // variable costs = cogs in % * revenue\n  // EBITDA = netProfit + amortization + deprecation + interest + netProfit * taxes%\n  // amortization = fixed_costs * 0,1\n  // deprecation = fixed_costs * 0,2\n  // interest = fixed_costs * 0,05\n\n  // calculations of optimization impact of SALES increase\n  const newRevenueVolumeInc = ((volume * salesIncrease) / 100 + volume) * price;\n  const newTotalCostsVolumeInc = Math.round(\n    (cogs / 100) * newRevenueVolumeInc + fixedCosts\n  );\n  const newNetProfitVolumeInc = Math.round(\n    newRevenueVolumeInc - newTotalCostsVolumeInc\n  );\n  const difNetProfitVolumeEuro = newNetProfitVolumeInc - netProfit;\n  const difNetProfitVolumePercent = (\n    (difNetProfitVolumeEuro / netProfit) *\n    100\n  ).toFixed(2);\n\n  // calculations of optimization impact of PRICE increase\n  const newRevenuePriceInc = volume * (price + (price * priceIncrease) / 100);\n  const newTotalCostsPriceInc = Math.round(\n    (cogs / 100) * newRevenuePriceInc + fixedCosts\n  );\n  const newNetProfitPriceInc = Math.round(\n    newRevenuePriceInc - newTotalCostsPriceInc\n  );\n  const difNetProfitPriceEuro = newNetProfitPriceInc - netProfit;\n  const difNetProfitPricePercent = (\n    (difNetProfitPriceEuro / netProfit) *\n    100\n  ).toFixed(2);\n  const newPrice = price + (price * priceIncrease) / 100;\n  // calculations of optimization impact of COSTS decrease\n  const newTotalCostsDec = Math.round(\n    (cogs / 100 - costsDecrease / 100) * revenue + fixedCosts\n  );\n  const newNetProfitCostsDec = Math.round(revenue - newTotalCostsDec);\n  const difNetProfitCostsEuro = newNetProfitCostsDec - netProfit;\n  const difNetProfitCostsPercent = (\n    (difNetProfitCostsEuro / netProfit) *\n    100\n  ).toFixed(2);\n  // total\n  const optimizationTotalEuro =\n    difNetProfitVolumeEuro + difNetProfitPriceEuro + difNetProfitCostsEuro;\n  const optimizationTotalPercent = (\n    (difNetProfitPriceEuro / netProfit +\n      difNetProfitCostsEuro / netProfit +\n      difNetProfitVolumeEuro / netProfit) *\n    100\n  ).toFixed(2);\n\n  // ACTUAL DATA\n  function handleVolumeChange(e) {\n    setVolume(parseInt(e.target.value, 10));\n  }\n  function handlePriceChange(e) {\n    setPrice(parseInt(e.target.value, 10));\n  }\n  function handleFixedCostsChange(e) {\n    setFixedCosts(parseInt(e.target.value, 10));\n  }\n  function handleCogsChange(e) {\n    setCogs(parseInt(e.target.value, 10));\n  }\n  function handleTaxesChange(e) {\n    setTaxes(parseInt(e.target.value, 10));\n  }\n\n  // Optimization data\n  function handleTargetProfitChange(e) {\n    setTargetProfit(parseInt(e.target.value, 10));\n  }\n  function handleSalesIncreaseChange(e) {\n    setSalesIncrease(parseInt(e.target.value, 10));\n  }\n  function handlePriceIncreaseChange(e) {\n    setPriceIncrease(parseInt(e.target.value, 10));\n  }\n  function handleCostsDecreaseChange(e) {\n    setCostsDecrease(parseInt(e.target.value, 10));\n  }\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    //calculations();\n\n    if (!volume) {\n      setValidation(\"Please enter a volume of products sold\");\n      return;\n    }\n    if (!price) {\n      setValidation(\"Please enter an average price\");\n      return;\n    }\n    if (!fixedCosts) {\n      setValidation(\"Please enter fixed costs\");\n      return;\n    }\n    if (!cogs) {\n      setValidation(\"Please enter COGS\");\n      return;\n    }\n    if (!taxes) {\n      setValidation(\"Please enter taxes\");\n      return;\n    }\n    setValidation(\"\");\n  }\n\n  return (\n    <Grid\n      templateRows=\"repeat(2, 1fr)\"\n      templateColumns=\"repeat(7, 1fr)\"\n      gap={2}\n    >\n      <GridItem className=\"input_class\" rowSpan={2} colSpan={2} bg=\"brand.100\">\n        <AddInputForm\n          volume={volume}\n          price={price}\n          costs={fixedCosts}\n          cogs={cogs}\n          taxes={taxes}\n          targetProfit={targetProfit}\n          validation={validation}\n          onVolumeChange={handleVolumeChange}\n          onPriceChange={handlePriceChange}\n          onCostsChange={handleFixedCostsChange}\n          onCogsChange={handleCogsChange}\n          onTaxesChange={handleTaxesChange}\n          onTargetProfitChange={handleTargetProfitChange}\n          onFormSubmit={handleFormSubmit}\n        />\n        <OptimizationInput\n          salesIncrease={salesIncrease}\n          priceIncrease={priceIncrease}\n          costsDecrease={costsDecrease}\n          onSalesIncrease={handleSalesIncreaseChange}\n          onPriceIncrease={handlePriceIncreaseChange}\n          onCostsDecrease={handleCostsDecreaseChange}\n        />\n      </GridItem>\n      <GridItem rowSpan={1} colSpan={2}>\n        <AddCurrentState\n          revenue={revenue}\n          totalCosts={totalCosts}\n          netProfit={netProfit}\n          ebitda={ebitda}\n        />\n      </GridItem>\n      <GridItem rowSpan={1} colSpan={3}>\n        <AddStatImpact\n          difNetProfitVolumeEuro={difNetProfitVolumeEuro}\n          difNetProfitVolumePercent={difNetProfitVolumePercent}\n          difNetProfitPriceEuro={difNetProfitPriceEuro}\n          difNetProfitPricePercent={difNetProfitPricePercent}\n          difNetProfitCostsEuro={difNetProfitCostsEuro}\n          difNetProfitCostsPercent={difNetProfitCostsPercent}\n          optimizationTotalEuro={optimizationTotalEuro}\n          optimizationTotalPercent={optimizationTotalPercent}\n          price={price}\n          priceIncrease={priceIncrease}\n          newPrice={newPrice}\n          salesIncrease={salesIncrease}\n          costsDecrease={costsDecrease}\n        />\n      </GridItem>\n\n      <GridItem rowSpan={1} colSpan={5} bg=\"#95d4e7\">\n        <ChartCol\n          volume={difNetProfitVolumeEuro}\n          price={difNetProfitPriceEuro}\n          costs={difNetProfitCostsEuro}\n          total={optimizationTotalEuro}\n        />\n      </GridItem>\n    </Grid>\n  );\n}\n\nexport default InputFront;\n","import React from \"react\";\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\n\nimport Header from \"./components/Header\";\nimport InputFront from \"./components/InputFront\";\nconst theme = extendTheme({\n  colors: {\n    brand: {\n      100: \"#24245c\",\n      // ...\n      900: \"#1a202c\",\n    },\n  },\n});\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <ColorModeSwitcher pos=\"absolute\" top={3} right={3} />\n      <Header />\n\n      <InputFront />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}