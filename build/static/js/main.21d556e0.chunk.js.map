{"version":3,"sources":["components/input/Input.jsx","components/input/InputPercent.jsx","components/input/simpleInput.jsx","components/input/FloatInput.jsx","components/AddInputForm.jsx","components/AddCurrentStateList.jsx","components/Grid/slider/SalesSlider.jsx","components/Grid/slider/PricenewSlider.jsx","components/Grid/slider/CostsNewSlider.jsx","components/Grid/AddSliderOptimization.jsx","components/Grid/AddOptomizationRezult.jsx","components/charts/BasicWaterfall.jsx","components/charts/ChartMessage.jsx","components/charts/BulletChart.jsx","components/Grid/Grid.jsx","components/InputFront.jsx","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["InputEuro","props","className","type","rest","classes","clsx","min","ml","mb","bg","pointerEvents","color","fontSize","children","InputPercent","SimpleInput","FloatInput","precision","step","AddInputForm","revenue","totalCosts","netProfit","ebitda","mx","my","size","textAlign","htmlFor","value","volume","onChange","onVolumeChange","maxWidth","price","onPriceChange","Input","costs","onCostsChange","cogs","onCogsChange","taxes","onTaxesChange","targetProfit","onTargetProfitChange","AddCurrentStateList","variableCosts","m","SalesSlider","max","this","salesValue","handleSalesOnChange","Component","PriceNewSlider","priceValue","handlePriceOnChange","CostsNewSlider","costsValue","handleCostsOnChange","AddSliderOptimization","AddOptomizationRezult","newPrice","volumeDif","volumeDifPercent","priceDif","priceDifPercent","costsDif","costsDifPercent","sumEuro","sumPercent","align","mt","src","alt","boxSize","objectFit","BasicWaterfall","total","App","data","name","increasing","marker","totals","orientation","measure","x","textposition","text","y","connector","line","layout","title","xaxis","yaxis","ticktext","autosize","showlegend","height","margin","b","t","pad","useResizeHandler","style","width","React","ChartMessage","cleanTotal","Math","round","BulletChart","BulletCharts","containerRef","createRef","state","handleResize","current","clientWidth","setState","window","addEventListener","removeEventListener","ref","ChartBullet","ariaDesc","ariaTitle","comparativeWarningMeasureData","comparativeWarningMeasureLegendData","constrainToVisibleArea","labels","datum","legendAllowWrap","legendPosition","maxDomain","padding","bottom","left","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","titlePosition","MainGrid","varCostsEuro","sum","parseInt","e","target","VolumeProfitDif","netPr","dif","VolumeProfitDifPercent","toFixed","PriceProfitDif","PriceProfitDifPercent","CostsProfitDif","CostsProfitDifPercent","TotalProfitDif","TotalProfitDifPercent","NewPrice","templateRows","templateColumns","gap","rowSpan","colSpan","pt","InputFront","useState","setVolume","setPrice","fixedCosts","setFixedCosts","setCogs","setTaxes","setTargetProfit","parseFloat","onFormSubmit","event","preventDefault","theme","extendTheme","fonts","heading","body","colors","brand","100","200","300","400","900","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.21d556e0.chunk.js","sourcesContent":["import React from \"react\";\nimport clsx from \"clsx\";\nimport {\n  NumberInput,\n  NumberInputField,\n  InputGroup,\n  InputRightElement,\n} from \"@chakra-ui/react\";\n\nfunction InputEuro(props) {\n  const { className, type = \"number\", ...rest } = props;\n  const classes = clsx(\"ui_numberfield\", className);\n\n  return (\n    <InputGroup>\n      <NumberInput min={0} ml=\"auto\" mb={2}>\n        <NumberInputField\n          className={classes}\n          type={type}\n          {...rest}\n          bg=\"white\"\n        />\n        <InputRightElement\n          pointerEvents=\"none\"\n          color=\"gray.400\"\n          fontSize=\"1.2em\"\n          children=\"€\"\n        />\n      </NumberInput>\n    </InputGroup>\n  );\n}\n\nexport default InputEuro;\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport {\n  NumberInput,\n  NumberInputField,\n  InputGroup,\n  InputRightElement,\n} from \"@chakra-ui/react\";\n\nfunction InputPercent(props) {\n  const { className, type = \"number\", ...rest } = props;\n  const classes = clsx(\"ui_numberfield\", className);\n\n  return (\n    <InputGroup>\n      <NumberInput min={0} ml=\"auto\" mb={2}>\n        <NumberInputField\n          className={classes}\n          type={type}\n          {...rest}\n          bg=\"white\"\n        />\n        <InputRightElement\n          pointerEvents=\"none\"\n          color=\"gray.400\"\n          fontSize=\"1.2em\"\n          children=\"%\"\n        />\n      </NumberInput>\n    </InputGroup>\n  );\n}\n\nexport default InputPercent;\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport {\n  NumberInput,\n  NumberInputField,\n  InputGroup,\n  InputRightElement,\n} from \"@chakra-ui/react\";\n\nfunction SimpleInput(props) {\n  const { className, type = \"number\", ...rest } = props;\n  const classes = clsx(\"ui_numberfield\", className);\n\n  return (\n    <InputGroup>\n      <NumberInput min={0} ml=\"auto\" mb={2}>\n        <NumberInputField\n          className={classes}\n          type={type}\n          {...rest}\n          bg=\"white\"\n        />\n        <InputRightElement\n          pointerEvents=\"none\"\n          color=\"gray.400\"\n          fontSize=\"1.2em\"\n        />\n      </NumberInput>\n    </InputGroup>\n  );\n}\n\nexport default SimpleInput;\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport {\n  NumberInput,\n  NumberInputField,\n  InputGroup,\n  InputRightElement,\n} from \"@chakra-ui/react\";\n\nfunction FloatInput(props) {\n  const { className, type = \"number\", ...rest } = props;\n  const classes = clsx(\"ui_numberfield\", className);\n\n  return (\n    <InputGroup>\n      <NumberInput min={0} ml=\"auto\" mb={2} precision={2} step={0.1}>\n        <NumberInputField\n          className={classes}\n          type={type}\n          {...rest}\n          bg=\"white\"\n        />\n        <InputRightElement\n          pointerEvents=\"none\"\n          color=\"gray.400\"\n          fontSize=\"1.2em\"\n          children=\"€\"\n        />\n      </NumberInput>\n    </InputGroup>\n  );\n}\n\nexport default FloatInput;\n","import React from \"react\";\nimport { VStack, Flex, Heading } from \"@chakra-ui/react\";\nimport InputEuro from \"./input/Input\";\nimport InputPercent from \"./input/InputPercent\";\nimport SimpleInput from \"./input/simpleInput\";\nimport FloatInput from \"./input/FloatInput\";\n\nfunction AddInputForm(props) {\n  const { revenue, totalCosts, netProfit, ebitda } = props;\n  return (\n    <VStack className=\"inputForm\" mx={5} my={4}>\n      <Heading size=\"sm\" my={3} textAlign=\"center\" className=\"smallHeader\">\n        Your actual company data\n      </Heading>\n\n      <Flex>\n        <label htmlFor=\"volume_sold\">Volume of product sold:</label>\n        <SimpleInput\n          className=\"volume_sold\"\n          value={props.volume}\n          onChange={props.onVolumeChange}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n      <Flex>\n        <label htmlFor=\"average_price\">Average price per product:</label>\n        <FloatInput\n          className=\"average_price\"\n          value={props.price}\n          onChange={props.onPriceChange}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n\n      <Flex>\n        <label htmlFor=\"fixed_costs\">Total fixed costs:</label>\n        <InputEuro\n          className=\"fixed_costs\"\n          value={props.costs}\n          onChange={props.onCostsChange}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n      <Flex>\n        <label htmlFor=\"cogs\">Variable costs:</label>\n        <InputPercent\n          className=\"cogs\"\n          value={props.cogs}\n          onChange={props.onCogsChange}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n      <Flex>\n        <label htmlFor=\"taxes\">Taxes:</label>\n        <InputPercent\n          className=\"taxes\"\n          value={props.taxes}\n          onChange={props.onTaxesChange}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n      <Flex>\n        <label htmlFor=\"targetProfit\">Target profit:</label>\n        <InputEuro\n          className=\"targetProfit\"\n          value={props.targetProfit}\n          onChange={props.onTargetProfitChange}\n          maxWidth=\"80%\"\n        />\n      </Flex>\n    </VStack>\n  );\n}\n\nexport default AddInputForm;\n","import React from \"react\";\nimport { Flex, Heading, VStack, Spacer, Box } from \"@chakra-ui/react\";\n\nfunction AddCurrentStateList(props) {\n  const { revenue, totalCosts, netProfit, ebitda, variableCosts } = props;\n  return (\n    <div className=\"inputForm currentState\" my={4}>\n      <Heading\n        size=\"sm\"\n        m={3}\n        textAlign=\"center\"\n        color=\"white\"\n        className=\"smallHeader\"\n      >\n        Current state\n      </Heading>\n      <Box className=\"currentList\">\n        <Flex className=\"currentResult\">\n          <Box>Revenue</Box>\n          <Spacer />\n          <Box>{revenue} €</Box>\n        </Flex>\n        <Flex className=\"currentResult\">\n          <Box>Variable costs</Box>\n          <Spacer />\n          <Box>{variableCosts} €</Box>\n        </Flex>\n        <Flex className=\"currentResult\">\n          <Box>Total Costs</Box>\n          <Spacer />\n          <Box>{totalCosts} €</Box>\n        </Flex>\n\n        <Flex className=\"currentNetProfit\">\n          <Box>Net Profit</Box>\n          <Spacer />\n          <Box>{netProfit} €</Box>\n        </Flex>\n      </Box>\n    </div>\n  );\n}\n\nexport default AddCurrentStateList;\n","import React, { Component } from \"react\";\nimport {\n  Flex,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n} from \"@chakra-ui/react\";\n\nclass SalesSlider extends Component {\n  render() {\n    return (\n      <>\n        <div className=\"sliderLegend\">Sales increase</div>\n        <Flex>\n          <input\n            type=\"range\"\n            min={0}\n            max={300}\n            value={this.props.salesValue}\n            className=\"slider\"\n            onChange={this.props.handleSalesOnChange}\n          />\n\n          <div className=\"valueBox\">\n            <p className=\"sliderValue\">{this.props.salesValue} %</p>\n          </div>\n        </Flex>\n      </>\n    );\n  }\n}\n\nexport default SalesSlider;\n","import React, { Component } from \"react\";\nimport { Flex } from \"@chakra-ui/react\";\n\nclass PriceNewSlider extends Component {\n  render() {\n    return (\n      <>\n        <div className=\"sliderLegend\">Price increase</div>\n        <Flex>\n          <input\n            type=\"range\"\n            min={0}\n            max={50}\n            value={this.props.priceValue}\n            className=\"slider\"\n            onChange={this.props.handlePriceOnChange}\n          />\n          <div className=\"valueBox\">\n            <p className=\"sliderValue\">{this.props.priceValue} %</p>\n          </div>\n        </Flex>\n      </>\n    );\n  }\n}\n\nexport default PriceNewSlider;\n","import React, { Component } from \"react\";\nimport { Flex } from \"@chakra-ui/react\";\n\nclass CostsNewSlider extends Component {\n  render() {\n    return (\n      <>\n        <div className=\"sliderLegend\">Costs decrease</div>\n        <Flex>\n          <input\n            type=\"range\"\n            min={0}\n            max={300}\n            value={this.props.costsValue}\n            className=\"slider\"\n            onChange={this.props.handleCostsOnChange}\n          />\n          <div className=\"valueBox\">\n            <p className=\"sliderValue\">{this.props.costsValue} %</p>\n          </div>\n        </Flex>\n      </>\n    );\n  }\n}\n\nexport default CostsNewSlider;\n","import React from \"react\";\nimport SalesSlider from \"./slider/SalesSlider\";\nimport PriceNewSlider from \"./slider/PricenewSlider\";\nimport CostsNewSlider from \"./slider/CostsNewSlider\";\nimport AddSalesSlider from \"./slider/AddSalesSlider\";\nimport { Heading } from \"@chakra-ui/react\";\n\nfunction AddSliderOptimization(props) {\n  const {\n    salesValue,\n    handleSalesOnChange,\n    priceValue,\n    handlePriceOnChange,\n    costsValue,\n    handleCostsOnChange,\n  } = props;\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <Heading size=\"sm\" my={3} textAlign=\"center\" className=\"smallHeader\">\n          Optimization instruments\n        </Heading>\n\n        <SalesSlider\n          salesValue={salesValue}\n          handleSalesOnChange={handleSalesOnChange}\n        />\n\n        <PriceNewSlider\n          priceValue={priceValue}\n          handlePriceOnChange={handlePriceOnChange}\n        />\n\n        <CostsNewSlider\n          costsValue={costsValue}\n          handleCostsOnChange={handleCostsOnChange}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default AddSliderOptimization;\n","import React from \"react\";\n\nimport {\n  StatGroup,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  StatArrow,\n  Heading,\n  Image,\n} from \"@chakra-ui/react\";\nfunction AddOptomizationRezult(props) {\n  const {\n    salesValue,\n    priceValue,\n    costsValue,\n    price,\n    newPrice,\n    volumeDif,\n    volumeDifPercent,\n    priceDif,\n    priceDifPercent,\n    costsDif,\n    costsDifPercent,\n    sumEuro,\n    sumPercent,\n  } = props;\n  if (!salesValue && !priceValue && !costsValue) {\n    return (\n      <div className=\"statImpact\">\n        <Image\n          src=\"./images/project-costs.png\"\n          alt=\"Calculating costs\"\n          boxSize=\"230px\"\n          objectFit=\"cover\"\n          className=\"image\"\n        />\n      </div>\n    );\n  }\n  return (\n    <div className=\"statImpact\">\n      <Heading align=\"center\" my={2} size=\"sm\" className=\"smallHeader\">\n        Impact of optimization on profit\n      </Heading>\n\n      <StatGroup align=\"center\">\n        <Stat>\n          <StatLabel>Sales Increase </StatLabel>\n          <StatNumber>{volumeDif} €</StatNumber>\n          <StatHelpText>\n            <StatArrow type=\"increase\" />\n            {volumeDifPercent} %\n          </StatHelpText>\n        </Stat>\n\n        <Stat>\n          <StatLabel>Price Increase </StatLabel>\n          <StatNumber>{priceDif} €</StatNumber>\n          <StatHelpText>\n            <StatArrow type=\"increase\" />\n            {priceDifPercent} %\n          </StatHelpText>\n        </Stat>\n        <Stat>\n          <StatLabel>Costs Decrease </StatLabel>\n          <StatNumber>{costsDif} €</StatNumber>\n          <StatHelpText>\n            <StatArrow type=\"increase\" />\n            {costsDifPercent} %\n          </StatHelpText>\n        </Stat>\n        <Stat>\n          <StatLabel>Total Profit</StatLabel>\n          <StatNumber>{sumEuro} €</StatNumber>\n          <StatHelpText>\n            <StatArrow type=\"increase\" />\n            {sumPercent} %\n          </StatHelpText>\n        </Stat>\n      </StatGroup>\n      <StatGroup align=\"center\" mt={4}>\n        <Stat className=\"currentPrice\">\n          <StatLabel>Current price</StatLabel>\n          <StatNumber>{price} €</StatNumber>\n          <StatHelpText>Average</StatHelpText>\n        </Stat>\n\n        <Stat className=\"newPrice\">\n          <StatLabel>New Price</StatLabel>\n          <StatNumber>{newPrice} €</StatNumber>\n          <StatHelpText>\n            <StatArrow type=\"increase\" />\n            {priceValue} %\n          </StatHelpText>\n        </Stat>\n      </StatGroup>\n    </div>\n  );\n}\n\nexport default AddOptomizationRezult;\n","import React from \"react\";\nimport Plot from \"react-plotly.js\";\nfunction BasicWaterfall(props) {\n  const { volume, price, costs, total, netProfit } = props;\n  class App extends React.Component {\n    render() {\n      return (\n        <Plot\n          data={[\n            {\n              name: \"data\",\n              type: \"waterfall\",\n              increasing: { marker: { color: \"#8ab2ee\" } },\n              totals: {\n                marker: {\n                  color: \"#24245c\",\n                },\n              },\n              orientation: \"v\",\n              measure: [\n                \"relative\",\n                \"relative\",\n                \"relative\",\n                \"relative\",\n                \"total\",\n              ],\n              x: [\"Net Profit\", \"Volume\", \"Price\", \"Costs\", \"Total\"],\n              textposition: \"auto\",\n              text: [netProfit, volume, price, costs, total],\n              y: [netProfit, volume, price, costs, total],\n              connector: {\n                line: {\n                  color: \"rgb(63, 63, 63)\",\n                },\n              },\n            },\n          ]}\n          layout={{\n            title: {\n              text: \"Optimization result\",\n            },\n            xaxis: {\n              type: \"category\",\n            },\n\n            yaxis: {\n              type: \"linear\",\n              ticktext: [netProfit, \"\", \"\", \"\"],\n            },\n            autosize: true,\n            showlegend: false,\n            height: 300,\n\n            margin: {\n              b: 40,\n              t: 40,\n              pad: 5,\n            },\n          }}\n          useResizeHandler={true}\n          style={{\n            width: \"100%\",\n          }}\n        />\n      );\n    }\n  }\n  return <App />;\n}\n\nexport default BasicWaterfall;\n","import React from \"react\";\nimport { Heading } from \"@chakra-ui/react\";\nfunction ChartMessage(props) {\n  const { total } = props;\n  const cleanTotal = Math.round(total);\n  if (cleanTotal < 100) {\n    return (\n      <Heading mt={7} mb={3} align=\"center\" size=\"sm\">\n        Optimize for {100 - cleanTotal} % more to reach you target profit\n      </Heading>\n    );\n  } else if (cleanTotal === 100) {\n    return (\n      <Heading mt={7} mb={3} align=\"center\" size=\"sm\">\n        Congratulations! You reached your goal!\n      </Heading>\n    );\n  } else if (cleanTotal > 100) {\n    return (\n      <Heading mt={7} mb={3} align=\"center\" size=\"sm\">\n        Your goal is exceed for {cleanTotal - 100} %\n      </Heading>\n    );\n  }\n  return (\n    <Heading mt={7} mb={3} align=\"center\" size=\"sm\">\n      Optimization impact on target profit in %\n    </Heading>\n  );\n}\n\nexport default ChartMessage;\n","import React from \"react\";\nimport { ChartBullet } from \"@patternfly/react-charts\";\nimport ChartMessage from \"./ChartMessage\";\nfunction BulletChart(props) {\n  const { total } = props;\n  class BulletCharts extends React.Component {\n    constructor(props) {\n      super(props);\n      this.containerRef = React.createRef();\n      this.state = {\n        width: 0,\n      };\n      this.handleResize = () => {\n        if (\n          this.containerRef.current &&\n          this.containerRef.current.clientWidth\n        ) {\n          this.setState({ width: this.containerRef.current.clientWidth });\n        }\n      };\n    }\n\n    componentDidMount() {\n      this.handleResize();\n      window.addEventListener(\"resize\", this.handleResize);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.handleResize);\n    }\n\n    render() {\n      const { width } = this.state;\n      return (\n        <div ref={this.containerRef} style={{ height: \"180px\" }}>\n          <ChartMessage total={total} />\n          <ChartBullet\n            ariaDesc=\"Optimization\"\n            ariaTitle=\"Optimization for target profit\"\n            comparativeWarningMeasureData={[{ name: \"Your target\", y: 100 }]}\n            comparativeWarningMeasureLegendData={[{ name: \"Your target\" }]}\n            constrainToVisibleArea\n            height={250}\n            labels={({ datum }) => `${datum.name}: ${datum.y}`}\n            legendAllowWrap={true}\n            legendPosition=\"bottom-left\"\n            maxDomain={{ y: 100 }}\n            padding={{\n              bottom: 50,\n              left: 0,\n              right: 70,\n              top: 5,\n            }}\n            primarySegmentedMeasureData={[{ name: \"Total in %\", y: total }]}\n            primarySegmentedMeasureLegendData={[{ name: \"Total\" }]}\n            qualitativeRangeData={[\n              { name: \"Target\", y: 100 },\n              { name: \"Target exceed\", y: 120 },\n            ]}\n            titlePosition=\"top-left\"\n            width={width}\n          />\n        </div>\n      );\n    }\n  }\n  return <BulletCharts />;\n}\n\nexport default BulletChart;\n","import React, { Component } from \"react\";\nimport { Grid, GridItem } from \"@chakra-ui/react\";\n\nimport AddSliderOptimization from \"./AddSliderOptimization\";\nimport AddOptomizationRezult from \"./AddOptomizationRezult\";\nimport BasicWaterfall from \"../charts/BasicWaterfall\";\nimport BulletChart from \"../charts/BulletChart\";\n\nfunction MainGrid(props) {\n  const {\n    volume,\n    price,\n    costs,\n    cogs,\n    netProfit,\n    targetProfit,\n    varCostsEuro,\n  } = props;\n  class App extends Component {\n    state = {\n      salesValue: 0,\n      priceValue: 0,\n      costsValue: 0,\n    };\n    sum = () => {\n      return volume + parseInt(this.state.salesValue);\n    };\n\n    handleSalesOnChange = (e) => this.setState({ salesValue: e.target.value });\n    handlePriceOnChange = (e) => this.setState({ priceValue: e.target.value });\n    handleCostsOnChange = (e) => this.setState({ costsValue: e.target.value });\n\n    // calculations of optimization impact VOLUME\n    VolumeProfitDif = () => {\n      const revenue =\n        ((volume * parseInt(this.state.salesValue)) / 100 + volume) * price;\n      const totalCosts = (cogs / 100) * revenue + costs;\n      const netPr = revenue - totalCosts;\n      const dif = Math.round(netPr - netProfit);\n      return parseInt(dif);\n    };\n\n    VolumeProfitDifPercent = () => {\n      const revenue =\n        ((volume * parseInt(this.state.salesValue)) / 100 + volume) * price;\n      const totalCosts = (cogs / 100) * revenue + costs;\n      const netPr = revenue - totalCosts;\n      const dif = Math.round(netPr - netProfit);\n      const difPercent = ((dif / netProfit) * 100).toFixed(2);\n      return difPercent;\n    };\n    // calculations of optimization impact PRICE\n    PriceProfitDif = () => {\n      const revenue =\n        ((price * parseInt(this.state.priceValue)) / 100 + price) * volume;\n      const totalCosts = (cogs / 100) * revenue + costs;\n      const netPr = revenue - totalCosts;\n      const dif = Math.round(netPr - netProfit);\n      return parseInt(dif);\n    };\n\n    PriceProfitDifPercent = () => {\n      const revenue =\n        ((price * parseInt(this.state.priceValue)) / 100 + price) * volume;\n      const totalCosts = (cogs / 100) * revenue + costs;\n      const netPr = revenue - totalCosts;\n      const dif = Math.round(netPr - netProfit);\n      const difPercent = ((dif / netProfit) * 100).toFixed(2);\n      return difPercent;\n    };\n    // calculations of optimization impact COSTS\n    CostsProfitDif = () => {\n      const revenue = price * volume;\n      const totalCosts =\n        (cogs / 100) * revenue -\n        (parseInt(this.state.costsValue) / 100) * (cogs / 100) * revenue +\n        costs;\n      const netPr = revenue - totalCosts;\n      const dif = Math.round(netPr - netProfit);\n      return parseInt(dif);\n    };\n\n    CostsProfitDifPercent = () => {\n      const revenue = price * volume;\n      const totalCosts =\n        (cogs / 100) * revenue -\n        (parseInt(this.state.costsValue) / 100) * (cogs / 100) * revenue +\n        costs;\n      const netPr = revenue - totalCosts;\n      const dif = Math.round(netPr - netProfit);\n      const difPercent = ((dif / netProfit) * 100).toFixed(2);\n      return difPercent;\n    };\n    // calculations of optimization TOTAL impact\n    TotalProfitDif = () => {\n      const revenue =\n        ((volume * parseInt(this.state.salesValue)) / 100 + volume) *\n        ((price * parseInt(this.state.priceValue)) / 100 + price);\n      const totalCosts =\n        (cogs / 100) * revenue -\n        (parseInt(this.state.costsValue) / 100) * (cogs / 100) * revenue +\n        costs;\n      const netPr = revenue - totalCosts;\n      const dif = Math.round(netPr - netProfit);\n      return parseInt(dif);\n    };\n\n    TotalProfitDifPercent = () => {\n      const revenue =\n        ((volume * parseInt(this.state.salesValue)) / 100 + volume) *\n        ((price * parseInt(this.state.priceValue)) / 100 + price);\n      const totalCosts =\n        varCostsEuro -\n        (parseInt(this.state.costsValue) / 100) * varCostsEuro +\n        costs;\n      const netPr = revenue - totalCosts;\n      const dif = Math.round(netPr - netProfit);\n      const difPercent = ((dif / netProfit) * 100).toFixed(2);\n      return difPercent;\n    };\n    // calculation of price difference\n    NewPrice = () => {\n      const newPrice = (\n        price +\n        (price * parseInt(this.state.priceValue)) / 100\n      ).toFixed(2);\n      return newPrice;\n    };\n\n    render() {\n      return (\n        <Grid\n          templateRows=\"repeat(2fr 0.7fr 2.3fr)\"\n          templateColumns=\"repeat(5, 1fr)\"\n          gap={0}\n        >\n          <GridItem rowSpan={1} colSpan={[5, 5, 5, 2]}>\n            <AddSliderOptimization\n              salesValue={this.state.salesValue}\n              handleSalesOnChange={this.handleSalesOnChange}\n              priceValue={this.state.priceValue}\n              handlePriceOnChange={this.handlePriceOnChange}\n              costsValue={this.state.costsValue}\n              handleCostsOnChange={this.handleCostsOnChange}\n            />\n          </GridItem>\n          <GridItem rowSpan={1} colSpan={[5, 5, 5, 3]}>\n            <AddOptomizationRezult\n              salesValue={this.state.salesValue}\n              priceValue={this.state.priceValue}\n              costsValue={this.state.costsValue}\n              price={price}\n              newPrice={this.NewPrice()}\n              volumeDif={this.VolumeProfitDif()}\n              volumeDifPercent={this.VolumeProfitDifPercent()}\n              priceDif={this.PriceProfitDif()}\n              priceDifPercent={this.PriceProfitDifPercent()}\n              costsDif={this.CostsProfitDif()}\n              costsDifPercent={this.CostsProfitDifPercent()}\n              sumEuro={this.TotalProfitDif()}\n              sumPercent={this.TotalProfitDifPercent()}\n            />\n          </GridItem>\n\n          <GridItem rowSpan={1} colSpan={5} bg=\"brand.300\">\n            <BulletChart\n              total={(\n                ((this.VolumeProfitDif() +\n                  this.PriceProfitDif() +\n                  this.CostsProfitDif()) /\n                  (targetProfit - netProfit)) *\n                100\n              ).toFixed(2)}\n            />\n          </GridItem>\n          <GridItem rowSpan={1} colSpan={5} pt={5}>\n            <BasicWaterfall\n              volume={this.VolumeProfitDif()}\n              price={this.PriceProfitDif()}\n              costs={this.CostsProfitDif()}\n              total={Math.round(\n                this.VolumeProfitDif() +\n                  this.PriceProfitDif() +\n                  this.CostsProfitDif() +\n                  netProfit\n              )}\n              netProfit={netProfit}\n            />\n          </GridItem>\n        </Grid>\n      );\n    }\n  }\n  return <App />;\n}\n\nexport default MainGrid;\n","import React, { useState } from \"react\";\nimport { Grid, GridItem } from \"@chakra-ui/react\";\nimport AddInputForm from \"./AddInputForm\";\nimport AddCurrentStateList from \"./AddCurrentStateList\";\nimport MainGrid from \"./Grid/Grid\";\n\nfunction InputFront() {\n  const [volume, setVolume] = useState(0);\n  const [price, setPrice] = useState(0);\n  const [fixedCosts, setFixedCosts] = useState(0);\n  const [cogs, setCogs] = useState(0);\n  const [taxes, setTaxes] = useState(0);\n  const [targetProfit, setTargetProfit] = useState(0);\n\n  // calculations of the current state\n  const revenue = volume * parseFloat(price);\n  const variableCosts = Math.round((cogs / 100) * revenue);\n  const totalCosts = Math.round((cogs / 100) * revenue + fixedCosts);\n  const netProfit = Math.round(revenue - totalCosts);\n  const ebitda = Math.round(\n    netProfit + fixedCosts * 0.35 + netProfit * (taxes / 100)\n  );\n  const varCostsEuro = Math.round((cogs / 100) * revenue);\n  // total costs = variable_costs + fixed_costs\n  // variable costs = cogs in % * revenue\n  // EBITDA = netProfit + amortization + deprecation + interest + netProfit * taxes%\n  // amortization = fixed_costs * 0,1\n  // deprecation = fixed_costs * 0,2\n  // interest = fixed_costs * 0,05\n\n  // ACTUAL DATA\n  function handleVolumeChange(e) {\n    setVolume(parseInt(e.target.value, 10));\n  }\n  function handlePriceChange(e) {\n    setPrice(parseFloat(e.target.value, 10));\n  }\n  function handleFixedCostsChange(e) {\n    setFixedCosts(parseInt(e.target.value, 10));\n  }\n  function handleCogsChange(e) {\n    setCogs(parseInt(e.target.value, 10));\n  }\n  function handleTaxesChange(e) {\n    setTaxes(parseInt(e.target.value, 10));\n  }\n  function handleTargetProfitChange(e) {\n    setTargetProfit(parseInt(e.target.value, 10));\n  }\n  function handleFormSubmit(event) {\n    event.preventDefault();\n  }\n  return (\n    <Grid\n      templateRows=\"repeat(1, 1fr)\"\n      templateColumns=\"repeat(7, 1fr)\"\n      gap={0}\n    >\n      <GridItem\n        className=\"input_class\"\n        rowSpan={1}\n        colSpan={[7, 3, 3, 2]}\n        bg=\"brand.100\"\n      >\n        <AddInputForm\n          volume={volume}\n          price={price}\n          costs={fixedCosts}\n          cogs={cogs}\n          taxes={taxes}\n          targetProfit={targetProfit}\n          revenue={revenue}\n          onFormSubmit={handleFormSubmit}\n          onVolumeChange={handleVolumeChange}\n          onPriceChange={handlePriceChange}\n          onCostsChange={handleFixedCostsChange}\n          onCogsChange={handleCogsChange}\n          onTaxesChange={handleTaxesChange}\n          onTargetProfitChange={handleTargetProfitChange}\n        />\n        <AddCurrentStateList\n          revenue={revenue}\n          totalCosts={totalCosts}\n          netProfit={netProfit}\n          ebitda={ebitda}\n          variableCosts={variableCosts}\n        />\n      </GridItem>\n      <GridItem rowSpan={1} colSpan={[7, 4, 4, 5]}>\n        <MainGrid\n          volume={volume}\n          price={price}\n          costs={fixedCosts}\n          cogs={cogs}\n          taxes={taxes}\n          netProfit={netProfit}\n          targetProfit={targetProfit}\n          varCostsEuro={varCostsEuro}\n        />\n      </GridItem>\n    </Grid>\n  );\n}\n\nexport default InputFront;\n","import \"@fontsource/raleway/400.css\";\nimport \"@fontsource/open-sans/700.css\";\nimport React from \"react\";\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport InputFront from \"./components/InputFront\";\nconst theme = extendTheme({\n  fonts: {\n    heading: \"Open Sans\",\n    body: \"Mukta\",\n  },\n  colors: {\n    brand: {\n      100: \"#24245c\",\n      200: \"#1f527b\",\n      300: \"#8ab2ee;\",\n      400: \"#6a92b3\",\n      // ...\n      900: \"#1a202c\",\n    },\n  },\n});\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <InputFront />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}